import getConfig from 'next/config';
import useSWR from 'swr';
import {evolve} from 'ramda';

const { publicRuntimeConfig } = getConfig();

const instance = async (url, options = {}) => {
  try {
    const response = await fetch(url, {
      headers: {
        Authorization: publicRuntimeConfig.apiAuthKey,
      },
      ...evolve({body: JSON.stringify}, options),
    });
    return response.json();
  } catch (err) {

  }
};
const fetcher = (url, options) => instance(url, options);

export default {
  get: (url) => {
    const { data, error } = useSWR(url, fetcher);
  
    return {
      data,
      isLoading: !error && !data,
      isError: error,
    };
  },

  post: (url, body) => fetch(url, {method: 'post', body}),

  put: (url, body) => fetch(url, {method: 'put', body}),

  delete: (url) => fetch(url, {method: 'delete'}),
};
